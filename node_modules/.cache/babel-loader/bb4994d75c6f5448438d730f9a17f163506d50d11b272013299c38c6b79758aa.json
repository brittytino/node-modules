{"ast":null,"code":"var _jsxFileName = \"D:\\\\SIH\\\\Sample\\\\Echolink-videointercom\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const login = async (username, password) => {\n    try {\n      // Fetch extension and password data from the server\n      const response = await fetch('https://server-ou54.onrender.com/webapi/core/extension-auth');\n      if (!response.ok) {\n        throw new Error('Failed to fetch extensions data');\n      }\n      const extensions = await response.json();\n\n      // Check if entered credentials match any in the fetched data\n      const isValidUser = extensions.some(ext => ext.extension === username && ext.password === password);\n      if (isValidUser) {\n        setIsAuthenticated(true);\n        return true; // Return true for successful login\n      }\n      return false; // Return false if credentials are invalid\n    } catch (error) {\n      console.error('Error during login:', error.message);\n      return false; // Return false if an error occurs\n    }\n  };\n  const logout = () => {\n    setIsAuthenticated(false);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"BT2f1XiqCgFHwobQTWR7kond0Ig=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","login","username","password","response","fetch","ok","Error","extensions","json","isValidUser","some","ext","extension","error","console","message","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["D:/SIH/Sample/Echolink-videointercom/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useState, useContext } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n  const login = async (username, password) => {\r\n    try {\r\n      // Fetch extension and password data from the server\r\n      const response = await fetch('https://server-ou54.onrender.com/webapi/core/extension-auth');\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch extensions data');\r\n      }\r\n\r\n      const extensions = await response.json();\r\n\r\n      // Check if entered credentials match any in the fetched data\r\n      const isValidUser = extensions.some(\r\n        (ext) => ext.extension === username && ext.password === password\r\n      );\r\n\r\n      if (isValidUser) {\r\n        setIsAuthenticated(true);\r\n        return true; // Return true for successful login\r\n      }\r\n\r\n      return false; // Return false if credentials are invalid\r\n    } catch (error) {\r\n      console.error('Error during login:', error.message);\r\n      return false; // Return false if an error occurs\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setIsAuthenticated(false);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ isAuthenticated, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnE,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMM,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAE7D,MAAMU,KAAK,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;IAC1C,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6DAA6D,CAAC;MAC3F,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,iCAAiC,CAAC;MACpD;MAEA,MAAMC,UAAU,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;;MAExC;MACA,MAAMC,WAAW,GAAGF,UAAU,CAACG,IAAI,CAChCC,GAAG,IAAKA,GAAG,CAACC,SAAS,KAAKX,QAAQ,IAAIU,GAAG,CAACT,QAAQ,KAAKA,QAC1D,CAAC;MAED,IAAIO,WAAW,EAAE;QACfV,kBAAkB,CAAC,IAAI,CAAC;QACxB,OAAO,IAAI,CAAC,CAAC;MACf;MAEA,OAAO,KAAK,CAAC,CAAC;IAChB,CAAC,CAAC,OAAOc,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAACE,OAAO,CAAC;MACnD,OAAO,KAAK,CAAC,CAAC;IAChB;EACF,CAAC;EAED,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACnBjB,kBAAkB,CAAC,KAAK,CAAC;EAC3B,CAAC;EAED,oBACEN,OAAA,CAACC,WAAW,CAACuB,QAAQ;IAACC,KAAK,EAAE;MAAEpB,eAAe;MAAEE,KAAK;MAAEgB;IAAO,CAAE;IAAApB,QAAA,EAC7DA;EAAQ;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACzB,EAAA,CAvCWF,YAAY;AAAA4B,EAAA,GAAZ5B,YAAY;AAyCzB,OAAO,MAAM6B,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMlC,UAAU,CAACG,WAAW,CAAC;AAAA;AAAC+B,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}