{"ast":null,"code":"var _jsxFileName = \"D:\\\\SIH\\\\Sample\\\\Echolink-videointercom\\\\src\\\\context\\\\AdminAuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from 'react';\nimport bcrypt from 'bcryptjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminAuthContext = /*#__PURE__*/createContext();\nexport const AdminAuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAdminAuthenticated, setIsAdminAuthenticated] = useState(false);\n  const adminLogin = async (username, password) => {\n    try {\n      // Fetch user credentials from your server\n      const response = await fetch('https://server-ou54.onrender.com/webapi/core/user-auth');\n      if (!response.ok) {\n        throw new Error(`Failed to fetch user data: ${response.statusText}`);\n      }\n      const users = await response.json(); // Array of users with username and hashed password\n      const user = users.find(user => user.username === username);\n      if (user) {\n        // Compare the entered password with the stored hashed password\n        const isMatch = await bcrypt.compare(password, user.password);\n        if (isMatch) {\n          console.log('Login successful!');\n          setIsAdminAuthenticated(true);\n          return true;\n        }\n      }\n      console.log('Invalid username or password.');\n      return false;\n    } catch (error) {\n      console.error('Error during login:', error);\n      return false;\n    }\n  };\n  const adminLogout = () => {\n    setIsAdminAuthenticated(false);\n  };\n  return /*#__PURE__*/_jsxDEV(AdminAuthContext.Provider, {\n    value: {\n      isAdminAuthenticated,\n      adminLogin,\n      adminLogout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(AdminAuthProvider, \"zmR0b1F8QU/s+lTI393KdNTDKLw=\");\n_c = AdminAuthProvider;\nexport const useAdminAuth = () => {\n  _s2();\n  return useContext(AdminAuthContext);\n};\n_s2(useAdminAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AdminAuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","bcrypt","jsxDEV","_jsxDEV","AdminAuthContext","AdminAuthProvider","children","_s","isAdminAuthenticated","setIsAdminAuthenticated","adminLogin","username","password","response","fetch","ok","Error","statusText","users","json","user","find","isMatch","compare","console","log","error","adminLogout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAdminAuth","_s2","$RefreshReg$"],"sources":["D:/SIH/Sample/Echolink-videointercom/src/context/AdminAuthContext.jsx"],"sourcesContent":["import React, { createContext, useState, useContext } from 'react';\r\nimport bcrypt from 'bcryptjs';\r\n\r\nconst AdminAuthContext = createContext();\r\n\r\nexport const AdminAuthProvider = ({ children }) => {\r\n  const [isAdminAuthenticated, setIsAdminAuthenticated] = useState(false);\r\n\r\n  const adminLogin = async (username, password) => {\r\n    try {\r\n      // Fetch user credentials from your server\r\n      const response = await fetch('https://server-ou54.onrender.com/webapi/core/user-auth');\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to fetch user data: ${response.statusText}`);\r\n      }\r\n\r\n      const users = await response.json(); // Array of users with username and hashed password\r\n      const user = users.find((user) => user.username === username);\r\n\r\n      if (user) {\r\n        // Compare the entered password with the stored hashed password\r\n        const isMatch = await bcrypt.compare(password, user.password);\r\n        if (isMatch) {\r\n          console.log('Login successful!');\r\n          setIsAdminAuthenticated(true);\r\n          return true;\r\n        }\r\n      }\r\n\r\n      console.log('Invalid username or password.');\r\n      return false;\r\n    } catch (error) {\r\n      console.error('Error during login:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const adminLogout = () => {\r\n    setIsAdminAuthenticated(false);\r\n  };\r\n\r\n  return (\r\n    <AdminAuthContext.Provider value={{ isAdminAuthenticated, adminLogin, adminLogout }}>\r\n      {children}\r\n    </AdminAuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAdminAuth = () => useContext(AdminAuthContext);\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAClE,OAAOC,MAAM,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,gBAAgB,gBAAGN,aAAa,CAAC,CAAC;AAExC,OAAO,MAAMO,iBAAiB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACjD,MAAM,CAACC,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAEvE,MAAMW,UAAU,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;IAC/C,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wDAAwD,CAAC;MACtF,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8BH,QAAQ,CAACI,UAAU,EAAE,CAAC;MACtE;MAEA,MAAMC,KAAK,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC,CAAC;MACrC,MAAMC,IAAI,GAAGF,KAAK,CAACG,IAAI,CAAED,IAAI,IAAKA,IAAI,CAACT,QAAQ,KAAKA,QAAQ,CAAC;MAE7D,IAAIS,IAAI,EAAE;QACR;QACA,MAAME,OAAO,GAAG,MAAMrB,MAAM,CAACsB,OAAO,CAACX,QAAQ,EAAEQ,IAAI,CAACR,QAAQ,CAAC;QAC7D,IAAIU,OAAO,EAAE;UACXE,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;UAChChB,uBAAuB,CAAC,IAAI,CAAC;UAC7B,OAAO,IAAI;QACb;MACF;MAEAe,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;MAC5C,OAAO,KAAK;IACd,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,OAAO,KAAK;IACd;EACF,CAAC;EAED,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxBlB,uBAAuB,CAAC,KAAK,CAAC;EAChC,CAAC;EAED,oBACEN,OAAA,CAACC,gBAAgB,CAACwB,QAAQ;IAACC,KAAK,EAAE;MAAErB,oBAAoB;MAAEE,UAAU;MAAEiB;IAAY,CAAE;IAAArB,QAAA,EACjFA;EAAQ;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACgB,CAAC;AAEhC,CAAC;AAAC1B,EAAA,CAzCWF,iBAAiB;AAAA6B,EAAA,GAAjB7B,iBAAiB;AA2C9B,OAAO,MAAM8B,YAAY,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMpC,UAAU,CAACI,gBAAgB,CAAC;AAAA;AAACgC,GAAA,CAAlDD,YAAY;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}